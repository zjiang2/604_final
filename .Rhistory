data=cci$train, mfinal=30)
test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
test_pred <- as.integer(test_probas > 0.5)
test_acc <- mean(test_pred == cci$test$y)
test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
set.seed(1160)
cci <- split_data(df_main)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=30)
set.seed(1160)
df_quant <- df_main %>% select(c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump"))
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=30)
test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
test_pred <- as.integer(test_probas > 0.5)
test_acc <- mean(test_pred == cci$test$y)
test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
set.seed(1160)
df_quant <- df_main %>% select(c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump"))
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=10)
test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
test_pred <- as.integer(test_probas > 0.5)
test_acc <- mean(test_pred == cci$test$y)
test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
ab_model$prob
as.integer(ab_model$prob[,2] > 0.5)
mean(as.integer(ab_model$prob[,2] > 0.5) == cci$train$y)
set.seed(1160)
df_quant <- df_main %>% select(c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump"))
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=4)
test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
test_pred <- as.integer(test_probas > 0.5)
test_acc <- mean(test_pred == cci$test$y)
test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
train_acc <- (ab_model$prob[, 2] == cci$train$y)
set.seed(1160)
df_quant <- df_main %>% select(c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump"))
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=10)
train_acc <- mean(ab_model$prob[, 2] == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_acc <- mean((val_probas > 0.5) == cci$validate$y)
train_acc; val_acc
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
set.seed(1160)
df_quant <- df_main %>% select(c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump"))
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=10)
train_acc <- mean((ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_acc <- mean((val_probas > 0.5) == cci$validate$y)
train_acc; val_acc
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
(ab_model$prob[, 2] > 0.5)
(ab_model$prob[, 2] > 0.5) = cci$train$y
ab_model$prob[, 2] > 0.5) = cci$train$y
(ab_model$prob[, 2] > 0.5) = cci$train$y
(ab_model$prob[, 2] > 0.5) == cci$train$y
(ab_model$prob[, 1] > 0.5) == cci$train$y
as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y
set.seed(1160)
df_quant <- df_main %>% select(c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump"))
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=10)
train_acc <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_acc <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
train_acc; val_acc
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
set.seed(1160)
df_quant <- df_main %>% select(c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump"))
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=6)
train_acc <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_acc <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
train_acc; val_acc
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
set.seed(1160)
df_quant <- df_main %>% select(c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump"))
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=1)
train_acc <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_acc <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
train_acc; val_acc
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
set.seed(1160)
df_quant <- df_main %>% select(c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump"))
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=2)
train_acc <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_acc <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
train_acc; val_acc
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
set.seed(1160)
df_quant <- df_main %>% select(c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump"))
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=2)
train_acc <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_acc <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
train_acc; val_acc
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
set.seed(1160)
df_quant <- df_main %>% select(c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump"))
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=10)
train_acc <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_acc <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
train_acc; val_acc
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
set.seed(1160)
df_quant <- df_main %>% select(c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump"))
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=40)
train_acc <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_acc <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
train_acc; val_acc
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
set.seed(1160)
df_quant <- df_main %>% select(c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump"))
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=20)
train_acc <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_acc <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
train_acc; val_acc
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
set.seed(1160)
df_quant <- df_main %>% select(c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump"))
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
# percentage20_Donald_Trump + IncomePerCap + pct_college
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=30)
train_acc <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_acc <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
train_acc; val_acc
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
n_trees = 1:20
L = length(n_trees)
train_accs = rep(0, L)
val_accs = rep(0, L)
for (i in 1:L) {
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=n_trees[i])
train_accs[i] <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_accs[i] <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
}
ada_conv <- data.frame(n_trees <- n_trees,
train_acc <- train_accs,
val_acc <- val_accs)
ggplot(data = ada_conv) + geom_line(aes(n_trees, train_acc, colour="Train Accuracy")) +
geom_line(aes(n_trees, val_acc, colour="Validation Accuracy"))
ada_conv <- data.frame(n_trees <- n_trees,
train_acc <- train_accs,
val_acc <- val_accs)
ggplot(data = ada_conv) + geom_line(aes(n_trees, train_acc)) +
geom_line(aes(n_trees, val_acc))
ada_conv <- data.frame(n_trees <- n_trees,
train_acc <- train_accs,
val_acc <- val_accs)
ggplot(data = ada_conv) + geom_line(aes(n_trees, train_acc, colour="Train Accuracy")) +
geom_line(aes(n_trees, val_acc, colour="Validation Accuracy"))
set.seed(1160)
select_cols <- c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
"IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump")
df_quant <- df_main %>% select(select_cols)
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
n_trees = 1:40
L = length(n_trees)
train_accs = rep(0, L)
val_accs = rep(0, L)
for (i in 1:L) {
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=n_trees[i])
train_accs[i] <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_accs[i] <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
}
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
ada_conv <- data.frame(n_trees <- n_trees,
train_acc <- train_accs,
val_acc <- val_accs)
ggplot(data = ada_conv) + geom_line(aes(n_trees, train_acc, colour="Train Accuracy")) +
geom_line(aes(n_trees, val_acc, colour="Validation Accuracy"))
ab_model$importance
set.seed(1160)
#select_cols <- c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
#                                 "IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump")
select_cols <- c("y", "percentage20_Donald_Trump")
df_quant <- df_main %>% select(select_cols)
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
n_trees = 1:10
L = length(n_trees)
train_accs = rep(0, L)
val_accs = rep(0, L)
for (i in 1:L) {
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=n_trees[i])
train_accs[i] <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_accs[i] <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
}
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
ada_conv <- data.frame(n_trees <- n_trees,
train_acc <- train_accs,
val_acc <- val_accs)
ggplot(data = ada_conv) + geom_line(aes(n_trees, train_acc, colour="Train Accuracy")) +
geom_line(aes(n_trees, val_acc, colour="Validation Accuracy"))
set.seed(1160)
#select_cols <- c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
#                                 "IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump")
select_cols <- c("y", "percentage20_Donald_Trump", "IncomePerCap")
df_quant <- df_main %>% select(select_cols)
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
n_trees = 1:10
L = length(n_trees)
train_accs = rep(0, L)
val_accs = rep(0, L)
for (i in 1:L) {
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=n_trees[i])
train_accs[i] <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_accs[i] <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
}
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
ada_conv <- data.frame(n_trees <- n_trees,
train_acc <- train_accs,
val_acc <- val_accs)
ggplot(data = ada_conv) + geom_line(aes(n_trees, train_acc, colour="Train Accuracy")) +
geom_line(aes(n_trees, val_acc, colour="Validation Accuracy"))
set.seed(1160)
#select_cols <- c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
#                                 "IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump")
select_cols <- c("y", "percentage20_Donald_Trump", "IncomePerCap", "TotalPop")
df_quant <- df_main %>% select(select_cols)
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
n_trees = 1:10
L = length(n_trees)
train_accs = rep(0, L)
val_accs = rep(0, L)
for (i in 1:L) {
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=n_trees[i])
train_accs[i] <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_accs[i] <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
}
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
ada_conv <- data.frame(n_trees <- n_trees,
train_acc <- train_accs,
val_acc <- val_accs)
ggplot(data = ada_conv) + geom_line(aes(n_trees, train_acc, colour="Train Accuracy")) +
geom_line(aes(n_trees, val_acc, colour="Validation Accuracy"))
set.seed(1160)
#select_cols <- c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
#                                 "IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump")
select_cols <- c("y", "percentage20_Donald_Trump", "IncomePerCap", "TotalPop")
df_quant <- df_main %>% select(select_cols)
df_quant$TotalPop <- log(df_quant$TotalPop)
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
n_trees = 1:10
L = length(n_trees)
train_accs = rep(0, L)
val_accs = rep(0, L)
for (i in 1:L) {
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=n_trees[i])
train_accs[i] <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_accs[i] <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
}
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
ada_conv <- data.frame(n_trees <- n_trees,
train_acc <- train_accs,
val_acc <- val_accs)
ggplot(data = ada_conv) + geom_line(aes(n_trees, train_acc, colour="Train Accuracy")) +
geom_line(aes(n_trees, val_acc, colour="Validation Accuracy"))
set.seed(1160)
#select_cols <- c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
#                                 "IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump")
select_cols <- c("y", "percentage20_Donald_Trump", "IncomePerCap", "TotalPop" "pct_college")
set.seed(1160)
#select_cols <- c("y", "pct_college", "TotalPop", "White", "Black", "Hispanic",
#                                 "IncomePerCap", "Poverty", "Walk", "percentage20_Donald_Trump")
select_cols <- c("y", "percentage20_Donald_Trump", "IncomePerCap", "TotalPop", "pct_college")
df_quant <- df_main %>% select(select_cols)
df_quant$TotalPop <- log(df_quant$TotalPop)
cci <- split_data(df_quant)
cci$train$y<- as.factor(cci$train$y)
n_trees = 1:10
L = length(n_trees)
train_accs = rep(0, L)
val_accs = rep(0, L)
for (i in 1:L) {
ab_model <- boosting(y ~ .,
data=cci$train, mfinal=n_trees[i])
train_accs[i] <- mean(as.integer(ab_model$prob[, 2] > 0.5) == cci$train$y)
val_probas <- predict.boosting(ab_model, cci$validate)$prob[, 2]
val_accs[i] <- mean(as.integer(val_probas > 0.5) == cci$validate$y)
}
# test_probas <- predict.boosting(ab_model, cci$test)$prob[, 2]
# test_pred <- as.integer(test_probas > 0.5)
# test_acc <- mean(test_pred == cci$test$y)
# test_acc
# pred <- prediction(test_probas, df_test$cloud)
# auc.tmp <- performance(pred, "auc")
# auc <- as.numeric(auc.tmp@y.values)
# test_acc; auc
ada_conv <- data.frame(n_trees <- n_trees,
train_acc <- train_accs,
val_acc <- val_accs)
ggplot(data = ada_conv) + geom_line(aes(n_trees, train_acc, colour="Train Accuracy")) +
geom_line(aes(n_trees, val_acc, colour="Validation Accuracy"))
